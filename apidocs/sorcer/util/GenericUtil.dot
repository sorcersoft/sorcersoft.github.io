#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.util.GenericUtil
	c248973 [label=<<table title="sorcer.util.GenericUtil" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./GenericUtil.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GenericUtil </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GenericUtil() </td></tr>
<tr><td align="left" balign="left"> + addToArchive(fileObj : File, jarOut : JarOutputStream) </td></tr>
<tr><td align="left" balign="left"> + addToArchive(fileObj : File, parentPath : String, jarOut : JarOutputStream) </td></tr>
<tr><td align="left" balign="left"> + findExistingDirectory(dirs : String[]) : String </td></tr>
<tr><td align="left" balign="left"> + findExistingFile(fileDirs : String[], fileName : String) : File </td></tr>
<tr><td align="left" balign="left"> + appendFileContents(dataFile : File, sA : String[]) </td></tr>
<tr><td align="left" balign="left"> + getScriptToRunCompiledMatlabExec(command : String, scratchDir : File, mcrHome : String, mcrEnv : String) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + download(sourceUrl : URL, destinationFile : File) </td></tr>
<tr><td align="left" balign="left"> + appendFileContents(dataFile : File, afc : Vector&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + catFileToLogger(filename : String, logger : Logger) </td></tr>
<tr><td align="left" balign="left"> + copyFile(sourceFile : File, destinationFile : File) </td></tr>
<tr><td align="left" balign="left"> + createArchive(fileList : List&lt;File&gt;, jarArchive : File) </td></tr>
<tr><td align="left" balign="left"> + createScriptLogFile(logFileName : String) : PrintWriter </td></tr>
<tr><td align="left" balign="left"> + deleteFilesAndSubDirs(dir : File) </td></tr>
<tr><td align="left" balign="left"> + dObjATodPrimA(aD : Double[][][]) : double[][][] </td></tr>
<tr><td align="left" balign="left"> + dObjATodPrimA(aD : Double[][]) : double[][] </td></tr>
<tr><td align="left" balign="left"> + dObjATodPrimA(aD : Double[]) : double[] </td></tr>
<tr><td align="left" balign="left"> + dPrimATodObjA(ad : double[][][]) : Double[][][] </td></tr>
<tr><td align="left" balign="left"> + dPrimATodObjA(ad : double[][]) : Double[][] </td></tr>
<tr><td align="left" balign="left"> + dPrimATodObjA(ad : double[]) : Double[] </td></tr>
<tr><td align="left" balign="left"> + envVarExists(envName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + execScript(shellScriptFile : File, scriptCommand : String[], execLog : PrintWriter) : Process </td></tr>
<tr><td align="left" balign="left"> + execScript(scriptCommand : String[], directory : File, result : List&lt;String&gt;, errorString : List&lt;String&gt;) : Process </td></tr>
<tr><td align="left" balign="left"> + getEnvVar(envName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getEnvVarNoException(envName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getFilesWithExtension(dir : File, extension : String) : File[] </td></tr>
<tr><td align="left" balign="left"> + getFileContents(file : File) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getFileContents(url : URL) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getInstance(fullClassName : String, constructorArgs : Object[]) : Object </td></tr>
<tr><td align="left" balign="left"> + getObjectMethodName(desiredMethodName : String, obj : Object) : String </td></tr>
<tr><td align="left" balign="left"> + getPropertiesString(myProps : Properties) : String </td></tr>
<tr><td align="left" balign="left"> + getRootName(scriptName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getSet(oA : Object[]) : Set&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + getSet(v : Vector&lt;?&gt;) : Set&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + getShellScriptFile(scriptName : String, runDir : String) : File </td></tr>
<tr><td align="left" balign="left"> + getShellScriptFile(scriptName : String, runDir : String, windows : boolean) : File </td></tr>
<tr><td align="left" balign="left"> + getStandardInLine() : String </td></tr>
<tr><td align="left" balign="left"> + getTildePath(absolutePath : String, lastName : String) : String </td></tr>
<tr><td align="left" balign="left"> + getUniqueReferences(objA : Object[]) : Object[] </td></tr>
<tr><td align="left" balign="left"> + getUniqueReferences(myVect : Vector&lt;Object&gt;) : Object[] </td></tr>
<tr><td align="left" balign="left"> + getUniqueString() : String </td></tr>
<tr><td align="left" balign="left"> + getVmDir() : String </td></tr>
<tr><td align="left" balign="left"> + isElement(array : String[], s : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + whatOS() : String </td></tr>
<tr><td align="left" balign="left"> + isLinux() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMac() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinuxOrMac() : boolean </td></tr>
<tr><td align="left" balign="left"> + isWindows() : boolean </td></tr>
<tr><td align="left" balign="left"> + isWindows64() : boolean </td></tr>
<tr><td align="left" balign="left"> + isWindows32() : boolean </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
<tr><td align="left" balign="left"> + makeExecutable(file : File) </td></tr>
<tr><td align="left" balign="left"> + printArray(da : double[]) </td></tr>
<tr><td align="left" balign="left"> + printArray(ia : int[]) </td></tr>
<tr><td align="left" balign="left"> + printArray(obj : Object[]) </td></tr>
<tr><td align="left" balign="left"> + arrayToString(obj : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + arrayToMatlabStringArray(da : double[]) : String </td></tr>
<tr><td align="left" balign="left"> + arrayToMatlabStringArray(da : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + arrayToString(obj : Object[], printIndex : boolean) : String </td></tr>
<tr><td align="left" balign="left"> + arrayToOneLineSpaceDelimitedString(obj : Object[]) : String </td></tr>
<tr><td align="left" balign="left"> + printArray(obj : Object[], logger : Logger) </td></tr>
<tr><td align="left" balign="left"> + printEnvVars() </td></tr>
<tr><td align="left" balign="left"> + printFile(file : File) </td></tr>
<tr><td align="left" balign="left"> + printFile(file : File, logger : Logger) </td></tr>
<tr><td align="left" balign="left"> + printProperties(myProps : Properties) </td></tr>
<tr><td align="left" balign="left"> + printSystemProperties() </td></tr>
<tr><td align="left" balign="left"> + printVect(vect : Vector&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + printVect(vect : Vector&lt;?&gt;, logger : Logger) </td></tr>
<tr><td align="left" balign="left"> + readObjectFromFile(file : File) : Object </td></tr>
<tr><td align="left" balign="left"> + removeSpaces(s : String) : String </td></tr>
<tr><td align="left" balign="left"> + runExecutable(executableName : String, logFileName : String, fileInputFileRecords : Vector&lt;?&gt;, runDir : String) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellCommand(host : String, cmd : String, dir : File) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellScript(machineName : String, shellScript : String[], directory : File) </td></tr>
<tr><td align="left" balign="left"> + waitForFileToExistAndBeReadable(file : File, maxMilliSecondsToWait : int, milliSecondsBetweenChecks : int) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellScript(machineName : String, shellScript : String[], tildePath : String) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellScript(machineName : String, shellScript : Vector&lt;?&gt;, directory : File) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellScript(machineName : String, shellScript : Vector&lt;?&gt;, tildePath : String) </td></tr>
<tr><td align="left" balign="left"> + runRemoteShellScript2(host : String, script : Vector&lt;?&gt;, directory : File) </td></tr>
<tr><td align="left" balign="left"> + runShellScript(shellScriptFile : File, execLog : PrintWriter, shellCommand : Vector&lt;?&gt;) : Process </td></tr>
<tr><td align="left" balign="left"> + runShellScript(shellScriptFile : File, execLog : PrintWriter, scriptInputRecords : Vector&lt;?&gt;, shellCommand : Vector&lt;?&gt;) : Process </td></tr>
<tr><td align="left" balign="left"> + runShellScript(shellScriptFile : File, scriptInputRecords : Vector&lt;?&gt;, shellCommand : Vector&lt;?&gt;) : Process </td></tr>
<tr><td align="left" balign="left"> + runShellScript(shellScriptFile : File, scriptInputRecords : Vector&lt;String&gt;) </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptFile : File, scriptContents : List&lt;String&gt;, stdout : File, stderr : File) : int </td></tr>
<tr><td align="left" balign="left"> + redirectOutput(p : Process, file : File) </td></tr>
<tr><td align="left" balign="left"> + redirectError(p : Process, file : File) </td></tr>
<tr><td align="left" balign="left"> + redirectInputStream2File(is : InputStream, file : File) </td></tr>
<tr><td align="left" balign="left"> + getFileNameWithoutExtension(file : File) : String </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptFile : File, scriptContents : Vector&lt;String&gt;, logFile : File, timeout : long, printStdOut : boolean, printStdError : boolean, doSynchronizedLaunch : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptFile : File, scriptContents : Vector&lt;String&gt;, logFile : File, timeout : long, printStdOut : boolean, printStdError : boolean, doSynchronizedLaunch : boolean, extraKillTimeCommands : Vector&lt;String&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + runPBSShellScript(scriptFile : File, scriptContents : List&lt;String&gt;, outFile : File, errFile : File, jobCheckInterval : long) : int </td></tr>
<tr><td align="left" balign="left"> + runSLURMShellScript(scriptFile : File, scriptContents : List&lt;String&gt;, outFile : File, errFile : File, jobCheckInterval : long) : int </td></tr>
<tr><td align="left" balign="left"> + wait_timer(waitTime_ms : long) </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptFile : File, scriptContents : Vector&lt;String&gt;, logFile : File, timeout : long, doSynchronizedLaunch : boolean) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptFile : File, scriptContents : Vector&lt;String&gt;, logFile : File, timeout : long) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptName : String, logFileName : String, scriptInputRecords : Vector&lt;?&gt;, runDir : String, shellCommand : Vector&lt;?&gt;) : Process </td></tr>
<tr><td align="left" balign="left"> + runShellScript(scriptName : String, logFileName : String, scriptInputRecords : Vector&lt;?&gt;, runDir : String, shellCommand : Vector&lt;?&gt;, windows : boolean) : Process </td></tr>
<tr><td align="left" balign="left"> + runShellScript(script : Vector&lt;String&gt;) </td></tr>
<tr><td align="left" balign="left"> + setFileContents(file : File, fileContents : List&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + setFileContents(file : File, sA : String[]) </td></tr>
<tr><td align="left" balign="left"> + setFileContents(file : File, string : String) </td></tr>
<tr><td align="left" balign="left"> + setFileContents(file : File, fileContents : Vector&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + spaceDelimit(str : String) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + string2Vect(sA : String[]) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + StringVectorFindAndReplace(stringVector : Vector&lt;String&gt;, find : String, replace : String) : Vector&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + unpackArchive(jarArchive : File, destinationPath : File) </td></tr>
<tr><td align="left" balign="left"> + upload(fromFile : File, toUrl : URL) </td></tr>
<tr><td align="left" balign="left"> + upload(v : Vector&lt;String&gt;, url : URL) </td></tr>
<tr><td align="left" balign="left"> + upload(sa : String[], url : URL) </td></tr>
<tr><td align="left" balign="left"> + vect2String(v : Vector&lt;?&gt;) : String[] </td></tr>
<tr><td align="left" balign="left"> + writeObjectToFile(file : File, obj : Object) </td></tr>
<tr><td align="left" balign="left"> + writeUrlToFile(inputUrl : URL, localInputFile : File) </td></tr>
<tr><td align="left" balign="left"> + executeCommandWithWorker(command : String, printOutput : boolean, printError : boolean, timeOut : long, dir : File, logFile : File) : int </td></tr>
<tr><td align="left" balign="left"> + executeCommandWithWorkerNoBlocking(command : String[], printOutput : boolean, printError : boolean, timeOut : long, dir : File, logFile : File, doSynchronizedLaunch : boolean) : Thread </td></tr>
<tr><td align="left" balign="left"> + dos2unix(file : File) </td></tr>
<tr><td align="left" balign="left"> + runShellScriptViaSlurm(appName : String, scriptFile : File, scriptRecords : Vector&lt;String&gt;, logFile : File) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScriptViaSlurm(appName : String, scriptFile : File, scriptRecords : Vector&lt;String&gt;, logFile : File, scriptTimeout : long) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScriptViaSlurm3(appName : String, scriptFile : File, scriptRecords : Vector&lt;String&gt;, logFile : File, scriptTimeout : long) : int </td></tr>
<tr><td align="left" balign="left"> + runShellScriptViaSlurm2(appName : String, scriptFile : File, scriptRecords : Vector&lt;String&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + runAppBySLURMQueue(scratchDir : File, localJobFile : File, appName : String, servProps : Properties) : long </td></tr>
<tr><td align="left" balign="left"> + padStringOnRight(instring : String, finalLength : int) : String </td></tr>
<tr><td align="left" balign="left"> + padStringOnLeft(instring : String, finalLength : int) : String </td></tr>
<tr><td align="left" balign="left"> + watchSLURMQueuedJob(scratchDir : File, shCmd : Vector&lt;?&gt;, jobID : String, appName : String, servProps : Properties) : long </td></tr>
<tr><td align="left" balign="left"> + nestedDoubleToNestedList(data : Double[][]) : List&lt;List&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + appendFileContents(msg : String, file : File) </td></tr>
<tr><td align="left" balign="left"> + toArtifactUrl(codebaseRoot : URL, artifactCoordinates : String) : URL </td></tr>
		</table></td></tr>
		</table>>, URL="./GenericUtil.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.util.GenericUtil implements java.io.Serializable
	c249619:p -> c248973:p [dir=back,arrowtail=empty,style=dashed];
	// java.io.Serializable
	c249619 [label=<<table title="java.io.Serializable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Serializable </td></tr>
		</table></td></tr>
		</table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

