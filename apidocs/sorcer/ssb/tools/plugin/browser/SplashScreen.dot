#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.ssb.tools.plugin.browser.SplashScreen
	c474336 [label=<<table title="sorcer.ssb.tools.plugin.browser.SplashScreen" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./SplashScreen.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SplashScreen </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SplashScreen(parent : Frame, image : Image) </td></tr>
<tr><td align="left" balign="left"> + paint(g : Graphics) </td></tr>
		</table></td></tr>
		</table>>, URL="./SplashScreen.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.ssb.tools.plugin.browser.SplashScreen extends java.awt.Window
	c474410:p -> c474336:p [dir=back,arrowtail=empty];
	// java.awt.Window
	c474410 [label=<<table title="java.awt.Window" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://docs.oracle.com/javase/7/docs/api/java/awt/Window.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Window </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Window(arg0 : Frame) </td></tr>
<tr><td align="left" balign="left"> + Window(arg0 : Window) </td></tr>
<tr><td align="left" balign="left"> + Window(arg0 : Window, arg1 : GraphicsConfiguration) </td></tr>
<tr><td align="left" balign="left"> + getIconImages() : List&lt;Image&gt; </td></tr>
<tr><td align="left" balign="left"> + setIconImages(arg0 : List&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + setIconImage(arg0 : Image) </td></tr>
<tr><td align="left" balign="left"> + addNotify() </td></tr>
<tr><td align="left" balign="left"> + removeNotify() </td></tr>
<tr><td align="left" balign="left"> + pack() </td></tr>
<tr><td align="left" balign="left"> + setMinimumSize(arg0 : Dimension) </td></tr>
<tr><td align="left" balign="left"> + setSize(arg0 : Dimension) </td></tr>
<tr><td align="left" balign="left"> + setSize(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + setLocation(arg0 : int, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + setLocation(arg0 : Point) </td></tr>
<tr><td align="left" balign="left"> + reshape(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + setVisible(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + show() </td></tr>
<tr><td align="left" balign="left"> + hide() </td></tr>
<tr><td align="left" balign="left"> + dispose() </td></tr>
<tr><td align="left" balign="left"> + toFront() </td></tr>
<tr><td align="left" balign="left"> + toBack() </td></tr>
<tr><td align="left" balign="left"> + getToolkit() : Toolkit </td></tr>
<tr><td align="left" balign="left"> + getWarningString() : String </td></tr>
<tr><td align="left" balign="left"> + getLocale() : Locale </td></tr>
<tr><td align="left" balign="left"> + getInputContext() : InputContext </td></tr>
<tr><td align="left" balign="left"> + setCursor(arg0 : Cursor) </td></tr>
<tr><td align="left" balign="left"> + getOwner() : Window </td></tr>
<tr><td align="left" balign="left"> + getOwnedWindows() : Window[] </td></tr>
<tr><td align="left" balign="left"> + getWindows() : Window[] </td></tr>
<tr><td align="left" balign="left"> + getOwnerlessWindows() : Window[] </td></tr>
<tr><td align="left" balign="left"> + setModalExclusionType(arg0 : Dialog.ModalExclusionType) </td></tr>
<tr><td align="left" balign="left"> + getModalExclusionType() : Dialog.ModalExclusionType </td></tr>
<tr><td align="left" balign="left"> + addWindowListener(arg0 : WindowListener) </td></tr>
<tr><td align="left" balign="left"> + addWindowStateListener(arg0 : WindowStateListener) </td></tr>
<tr><td align="left" balign="left"> + addWindowFocusListener(arg0 : WindowFocusListener) </td></tr>
<tr><td align="left" balign="left"> + removeWindowListener(arg0 : WindowListener) </td></tr>
<tr><td align="left" balign="left"> + removeWindowStateListener(arg0 : WindowStateListener) </td></tr>
<tr><td align="left" balign="left"> + removeWindowFocusListener(arg0 : WindowFocusListener) </td></tr>
<tr><td align="left" balign="left"> + getWindowListeners() : WindowListener[] </td></tr>
<tr><td align="left" balign="left"> + getWindowFocusListeners() : WindowFocusListener[] </td></tr>
<tr><td align="left" balign="left"> + getWindowStateListeners() : WindowStateListener[] </td></tr>
<tr><td align="left" balign="left"> + getListeners(arg0 : Class&lt;T&gt;) : T[] </td></tr>
<tr><td align="left" balign="left"> # processEvent(arg0 : AWTEvent) </td></tr>
<tr><td align="left" balign="left"> # processWindowEvent(arg0 : WindowEvent) </td></tr>
<tr><td align="left" balign="left"> # processWindowFocusEvent(arg0 : WindowEvent) </td></tr>
<tr><td align="left" balign="left"> # processWindowStateEvent(arg0 : WindowEvent) </td></tr>
<tr><td align="left" balign="left"> + setAlwaysOnTop(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isAlwaysOnTopSupported() : boolean </td></tr>
<tr><td align="left" balign="left"> + isAlwaysOnTop() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFocusOwner() : Component </td></tr>
<tr><td align="left" balign="left"> + getMostRecentFocusOwner() : Component </td></tr>
<tr><td align="left" balign="left"> + isActive() : boolean </td></tr>
<tr><td align="left" balign="left"> + isFocused() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFocusTraversalKeys(arg0 : int) : Set&lt;AWTKeyStroke&gt; </td></tr>
<tr><td align="left" balign="left"> + setFocusCycleRoot(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isFocusCycleRoot() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFocusCycleRootAncestor() : Container </td></tr>
<tr><td align="left" balign="left"> + isFocusableWindow() : boolean </td></tr>
<tr><td align="left" balign="left"> + getFocusableWindowState() : boolean </td></tr>
<tr><td align="left" balign="left"> + setFocusableWindowState(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRequestFocus(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isAutoRequestFocus() : boolean </td></tr>
<tr><td align="left" balign="left"> + addPropertyChangeListener(arg0 : PropertyChangeListener) </td></tr>
<tr><td align="left" balign="left"> + addPropertyChangeListener(arg0 : String, arg1 : PropertyChangeListener) </td></tr>
<tr><td align="left" balign="left"> + isValidateRoot() : boolean </td></tr>
<tr><td align="left" balign="left"> + postEvent(arg0 : Event) : boolean </td></tr>
<tr><td align="left" balign="left"> + isShowing() : boolean </td></tr>
<tr><td align="left" balign="left"> + applyResourceBundle(arg0 : ResourceBundle) </td></tr>
<tr><td align="left" balign="left"> + applyResourceBundle(arg0 : String) </td></tr>
<tr><td align="left" balign="left"> + setType(arg0 : Window.Type) </td></tr>
<tr><td align="left" balign="left"> + getType() : Window.Type </td></tr>
<tr><td align="left" balign="left"> + getAccessibleContext() : AccessibleContext </td></tr>
<tr><td align="left" balign="left"> + setLocationRelativeTo(arg0 : Component) </td></tr>
<tr><td align="left" balign="left"> + createBufferStrategy(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + createBufferStrategy(arg0 : int, arg1 : BufferCapabilities) </td></tr>
<tr><td align="left" balign="left"> + getBufferStrategy() : BufferStrategy </td></tr>
<tr><td align="left" balign="left"> + setLocationByPlatform(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + isLocationByPlatform() : boolean </td></tr>
<tr><td align="left" balign="left"> + setBounds(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + setBounds(arg0 : Rectangle) </td></tr>
<tr><td align="left" balign="left"> + getOpacity() : float </td></tr>
<tr><td align="left" balign="left"> + setOpacity(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getShape() : Shape </td></tr>
<tr><td align="left" balign="left"> + setShape(arg0 : Shape) </td></tr>
<tr><td align="left" balign="left"> + getBackground() : Color </td></tr>
<tr><td align="left" balign="left"> + setBackground(arg0 : Color) </td></tr>
<tr><td align="left" balign="left"> + isOpaque() : boolean </td></tr>
<tr><td align="left" balign="left"> + paint(arg0 : Graphics) </td></tr>
		</table></td></tr>
		</table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/awt/Window.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

