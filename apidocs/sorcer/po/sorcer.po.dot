#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.po.operator
	c49634 [label=<<table title="sorcer.po.operator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./operator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> operator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + operator() </td></tr>
<tr><td align="left" balign="left"> + par(path : String, argument : T) : Par&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + dbPar(path : String, argument : T) : Par&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + par(name : String, path : String, argument : Mappable&lt;&gt;) : Par&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + pipe(in : Mappable&lt;&gt;, name : String, path : String, out : Mappable&lt;&gt;) : Par&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + store(par : Par&lt;&gt;) : URL </td></tr>
<tr><td align="left" balign="left"> + persistent(par : Par&lt;&gt;) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + url(par : Par&lt;&gt;, url : URL) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + par(pm : ParModel&lt;&gt;, name : String) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + model(name : String, Objects : Identifiable[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + model(Objects : Identifiable[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + value(par : Par&lt;&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> + get(pm : ParModel&lt;&gt;, parname : String, parametrs : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + asis(pm : ParModel&lt;&gt;, parname : String) : Object </td></tr>
<tr><td align="left" balign="left"> + invoker(mappable : Mappable&lt;&gt;, path : String) : Invocation&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + asis(par : Par&lt;&gt;) : Object </td></tr>
<tr><td align="left" balign="left"> + clearPars(invoker : Object) </td></tr>
<tr><td align="left" balign="left"> + parContext(objects : Identifiable[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + result(model : Context&lt;&gt;, parname : String) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + add(parContext : ParModel&lt;&gt;, objects : Identifiable[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + append(parContext : ParModel&lt;&gt;, objects : Identifiable[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + put(parModel : ParModel&lt;&gt;, name : String, value : Object) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + put(parModel : ParModel&lt;&gt;, entries : Tuple2&lt;&gt;[]) : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + set(par : Par&lt;&gt;, value : Object) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + set(context : ParModel&lt;&gt;, parname : String, value : Object) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + add(par : Par&lt;&gt;, to : Object) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + connect(to : Object, par : Par&lt;&gt;) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + par(object : Object) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoke(invoker : Invocation&lt;&gt;, parameters : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + invoke(invoker : Invocation&lt;&gt;, context : Context&lt;&gt;, parameters : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + invoke(parModel : ParModel&lt;&gt;, parname : String, parameters : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + invoke(parContext : ParModel&lt;&gt;, parname : String, context : Context&lt;&gt;, parameters : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + args(parameters : Arg[]) : Arg[] </td></tr>
<tr><td align="left" balign="left"> + pars(invoker : Invoker&lt;&gt;) : ArgSet </td></tr>
<tr><td align="left" balign="left"> + pars(parnames : String[]) : Arg[] </td></tr>
<tr><td align="left" balign="left"> + args(pm : ParModel&lt;&gt;, parnames : String[]) : Arg[] </td></tr>
<tr><td align="left" balign="left"> + invoker(evaluator : Evaluator&lt;&gt;, pars : ArgSet) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(name : String, expression : String, pars : Arg[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(name : String, expression : String, pars : Par&lt;&gt;[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(expression : String, pars : Arg[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(expression : String) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(exertion : Exertion) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + inc(name : String, invoker : Invocation&lt;&gt;) : InvokeIncrementor </td></tr>
<tr><td align="left" balign="left"> + inc(name : String, invoker : Invocation&lt;&gt;, increment : int) : InvokeIncrementor </td></tr>
<tr><td align="left" balign="left"> + inc(name : String, invoker : Invocation&lt;&gt;, increment : double) : InvokeDoubleIncrementor </td></tr>
<tr><td align="left" balign="left"> + reset(incrementor : Incrementor&lt;&gt;) : Incrementor&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + next(incrementor : Incrementor&lt;T&gt;) : T </td></tr>
<tr><td align="left" balign="left"> + next(model : ParModel&lt;&gt;, name : String) : T </td></tr>
<tr><td align="left" balign="left"> + methodInvoker(selector : String, methodObject : Object, pars : Par&lt;&gt;[]) : MethodInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + methodInvoker(selector : String, methodObject : Object, context : Context&lt;&gt;, pars : Par&lt;&gt;[]) : MethodInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + exertInvoker(name : String, exertion : Exertion, path : String, pars : Par&lt;&gt;[]) : ExertInvoker </td></tr>
<tr><td align="left" balign="left"> + exertInvoker(exertion : Exertion, path : String, pars : Par&lt;&gt;[]) : ExertInvoker </td></tr>
<tr><td align="left" balign="left"> + exertInvoker(exertion : Exertion, pars : Par&lt;&gt;[]) : ExertInvoker </td></tr>
<tr><td align="left" balign="left"> + cmdInvoker(name : String, cmd : String, pars : Par&lt;&gt;[]) : CmdInvoker </td></tr>
<tr><td align="left" balign="left"> + runnableInvoker(name : String, runnable : Runnable, pars : Par&lt;&gt;[]) : RunnableInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + callableInvoker(name : String, callable : Callable&lt;&gt;, pars : Par&lt;&gt;[]) : CallableInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + opt(name : String, target : Invoker&lt;&gt;) : OptInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + opt(name : String, condition : Condition, target : Invoker&lt;&gt;) : OptInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + alt(name : String, invokers : OptInvoker&lt;&gt;[]) : AltInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + loop(name : String, condition : Condition, target : Invoker&lt;&gt;) : LoopInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + loop(name : String, condition : Condition, target : Par&lt;&gt;) : LoopInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + get(invoker : AltInvoker&lt;&gt;, index : int) : OptInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + agent(name : String, classNme : String, agentJar : URL) : Agent&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invoker(name : String, invoker : Invoker&lt;&gt;) : ExecPath </td></tr>
<tr><td align="left" balign="left"> + input(par : Par&lt;&gt;) : InEntry&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + in(par : Par&lt;&gt;) : InEntry&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + scope(par : Par&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invokeScope(par : Par&lt;&gt;) : Context&lt;&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./operator.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

