#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.monitor.MonitorEvent
	c188606 [label=<<table title="sorcer.core.monitor.MonitorEvent" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../core/monitor/MonitorEvent.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MonitorEvent </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MonitorEvent(source : Object) </td></tr>
<tr><td align="left" balign="left"> + MonitorEvent(source : Object, ex : Exertion, cause : int) </td></tr>
<tr><td align="left" balign="left"> + getExertion() : Exertion </td></tr>
<tr><td align="left" balign="left"> + getCause() : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../core/monitor/MonitorEvent.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.ServiceExertion
	c188653 [label=<<table title="sorcer.service.ServiceExertion" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ServiceExertion.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ServiceExertion </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> # exertionId : Uuid </td></tr>
<tr><td align="left" balign="left"> # runtimeId : String </td></tr>
<tr><td align="left" balign="left"> # parentId : Uuid </td></tr>
<tr><td align="left" balign="left"> # parent : Exertion </td></tr>
<tr><td align="left" balign="left"> # ownerId : String </td></tr>
<tr><td align="left" balign="left"> # subjectId : String </td></tr>
<tr><td align="left" balign="left"> # subject : Subject </td></tr>
<tr><td align="left" balign="left"> # domainId : String </td></tr>
<tr><td align="left" balign="left"> # subdomainId : String </td></tr>
<tr><td align="left" balign="left"> # lsbId : Long </td></tr>
<tr><td align="left" balign="left"> # msbId : Long </td></tr>
<tr><td align="left" balign="left"> # sessionId : Uuid </td></tr>
<tr><td align="left" balign="left"> # monitorSession : MonitoringSession </td></tr>
<tr><td align="left" balign="left"> # index : Integer </td></tr>
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # description : String </td></tr>
<tr><td align="left" balign="left"> # project : String </td></tr>
<tr><td align="left" balign="left"> # goodUntilDate : String </td></tr>
<tr><td align="left" balign="left"> # accessClass : String </td></tr>
<tr><td align="left" balign="left"> # isExportControlled : Boolean </td></tr>
<tr><td align="left" balign="left"> # scopeCode : Integer </td></tr>
<tr><td align="left" balign="left"> # status : Integer </td></tr>
<tr><td align="left" balign="left"> # priority : Integer </td></tr>
<tr><td align="left" balign="left"> # signatures : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> # dataContext : ServiceContext&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + count : int </td></tr>
<tr><td align="left" balign="left"> # controlContext : ControlContext </td></tr>
<tr><td align="left" balign="left"> # setters : List&lt;Setter&gt; </td></tr>
<tr><td align="left" balign="left"> # principal : SorcerPrincipal </td></tr>
<tr><td align="left" balign="left"> # isRevaluable : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ServiceExertion() </td></tr>
<tr><td align="left" balign="left"> + ServiceExertion(name : String) </td></tr>
<tr><td align="left" balign="left"> # init(name : String) </td></tr>
<tr><td align="left" balign="left"> + service(exertion : Exertion) : Exertion </td></tr>
<tr><td align="left" balign="left"> + service(exertion : Exertion, txn : Transaction) : Exertion </td></tr>
<tr><td align="left" balign="left"> + invoke(entries : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + invoke(context : Context&lt;&gt;, entries : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + exert(txn : Transaction, entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + exert() : Exertion </td></tr>
<tr><td align="left" balign="left"> + exert(entries : Arg[]) : Exertion </td></tr>
<tr><td align="left" balign="left"> + exert(txn : Transaction, providerName : String, entries : Arg[]) : Exertion </td></tr>
<tr><td align="left" balign="left"> + getSorcerPrincipal() : SorcerPrincipal </td></tr>
<tr><td align="left" balign="left"> + getPrincipalID() : String </td></tr>
<tr><td align="left" balign="left"> + setPrincipalID(id : String) </td></tr>
<tr><td align="left" balign="left"> + removeSignature(index : int) </td></tr>
<tr><td align="left" balign="left"> + setAccess(access : Strategy.Access) </td></tr>
<tr><td align="left" balign="left"> + setFlow(type : Strategy.Flow) </td></tr>
<tr><td align="left" balign="left"> + getSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + addSignatures(signatures : List&lt;Signature&gt;) </td></tr>
<tr><td align="left" balign="left"> + isBatch() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSignatures(signatures : List&lt;Signature&gt;) </td></tr>
<tr><td align="left" balign="left"> + setProcessSignature(signature : Signature) </td></tr>
<tr><td align="left" balign="left"> + setService(provider : Service) </td></tr>
<tr><td align="left" balign="left"> + getService() : Service </td></tr>
<tr><td align="left" balign="left"> + getFlowType() : Strategy.Flow </td></tr>
<tr><td align="left" balign="left"> + setFlowType(flowType : Strategy.Flow) </td></tr>
<tr><td align="left" balign="left"> + getAccessType() : Strategy.Access </td></tr>
<tr><td align="left" balign="left"> + setAccessType(accessType : Strategy.Access) </td></tr>
<tr><td align="left" balign="left"> + getScopeCode() : int </td></tr>
<tr><td align="left" balign="left"> + setScopeCode(value : int) </td></tr>
<tr><td align="left" balign="left"> + getPrincipal() : SorcerPrincipal </td></tr>
<tr><td align="left" balign="left"> + setPrincipal(principal : SorcerPrincipal) </td></tr>
<tr><td align="left" balign="left"> + getParentId() : Uuid </td></tr>
<tr><td align="left" balign="left"> + setParentId(parentId : Uuid) </td></tr>
<tr><td align="left" balign="left"> + getOwnerId() : String </td></tr>
<tr><td align="left" balign="left"> + setOwnerId(id : String) </td></tr>
<tr><td align="left" balign="left"> + getStatus() : int </td></tr>
<tr><td align="left" balign="left"> + setStatus(value : int) </td></tr>
<tr><td align="left" balign="left"> + setSubjectId(id : String) </td></tr>
<tr><td align="left" balign="left"> + getSubjectId() : String </td></tr>
<tr><td align="left" balign="left"> + getSubject() : Subject </td></tr>
<tr><td align="left" balign="left"> + setSubject(subject : Subject) </td></tr>
<tr><td align="left" balign="left"> + setProject(projectName : String) </td></tr>
<tr><td align="left" balign="left"> + getProject() : String </td></tr>
<tr><td align="left" balign="left"> + setAccessClass(s : String) </td></tr>
<tr><td align="left" balign="left"> + getAccessClass() : String </td></tr>
<tr><td align="left" balign="left"> + isExportControlled(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + isExportControlled() : boolean </td></tr>
<tr><td align="left" balign="left"> + getGoodUntilDate() : String </td></tr>
<tr><td align="left" balign="left"> + setGoodUntilDate(date : String) </td></tr>
<tr><td align="left" balign="left"> + getId() : Uuid </td></tr>
<tr><td align="left" balign="left"> + getDeploymentId(list : List&lt;NetSignature&gt;) : String </td></tr>
<tr><td align="left" balign="left"> + getDeploymentId() : String </td></tr>
<tr><td align="left" balign="left"> + getRuntimeId() : String </td></tr>
<tr><td align="left" balign="left"> + setRuntimeId(id : String) </td></tr>
<tr><td align="left" balign="left"> + setId(id : Uuid) </td></tr>
<tr><td align="left" balign="left"> + getDomainId() : String </td></tr>
<tr><td align="left" balign="left"> + setDomainId(domainId : String) </td></tr>
<tr><td align="left" balign="left"> + setSubdomainId(subdomaindId : String) </td></tr>
<tr><td align="left" balign="left"> + getSubdomainId() : String </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + getRendezvousName() : String </td></tr>
<tr><td align="left" balign="left"> + getDescription() : String </td></tr>
<tr><td align="left" balign="left"> + setDescription(description : String) </td></tr>
<tr><td align="left" balign="left"> + getIndex() : int </td></tr>
<tr><td align="left" balign="left"> + setIndex(i : int) </td></tr>
<tr><td align="left" balign="left"> + isMonitorable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setMonitored(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + isWaitable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setWait(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + hasChild(childName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMsbId() : long </td></tr>
<tr><td align="left" balign="left"> + setLsbId(leastSig : long) </td></tr>
<tr><td align="left" balign="left"> + setMsbId(mostSig : long) </td></tr>
<tr><td align="left" balign="left"> + setSessionId(id : Uuid) </td></tr>
<tr><td align="left" balign="left"> + getSessionId() : Uuid </td></tr>
<tr><td align="left" balign="left"> + setContext(context : Context&lt;&gt;) : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> + setControlContext(context : ControlContext) : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> + updateStrategy(context : ControlContext) : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> + setPriority(p : int) </td></tr>
<tr><td align="left" balign="left"> + getPriority() : int </td></tr>
<tr><td align="left" balign="left"> + getProcessSignature() : Signature </td></tr>
<tr><td align="left" balign="left"> + getApdProcessSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getPreprocessSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getPostprocessSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + addSignature(signature : Signature) </td></tr>
<tr><td align="left" balign="left"> + removeSignature(signature : Signature) </td></tr>
<tr><td align="left" balign="left"> + getServiceType() : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelector() : String </td></tr>
<tr><td align="left" balign="left"> + compareByIndex(e : Exertion) : int </td></tr>
<tr><td align="left" balign="left"> + isExecutable() : boolean </td></tr>
<tr><td align="left" balign="left"> + getParent() : Exertion </td></tr>
<tr><td align="left" balign="left"> + setParent(parent : Exertion) </td></tr>
<tr><td align="left" balign="left"> + contextToString() : String </td></tr>
<tr><td align="left" balign="left"> + getExceptionCount() : int </td></tr>
<tr><td align="left" balign="left"> + getTrace() : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + isTree() : boolean </td></tr>
<tr><td align="left" balign="left"> + getDataContext() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getControlContext() : ControlContext </td></tr>
<tr><td align="left" balign="left"> + getContext() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getContext(componentExertionName : String) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getControlContext(componentExertionName : String) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getControlInfo() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + startExecTime() </td></tr>
<tr><td align="left" balign="left"> + stopExecTime() </td></tr>
<tr><td align="left" balign="left"> + getExecTime() : String </td></tr>
<tr><td align="left" balign="left"> + setExecTimeRequested(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + isExecTimeRequested() : boolean </td></tr>
<tr><td align="left" balign="left"> + getPar(path : String) : Par&lt;&gt; </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + linkContext(context : Context&lt;&gt;, path : String) : Context&lt;&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + linkControlContext(context : Context&lt;&gt;, path : String) : Context&lt;&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTree(visited : Set&lt;&gt;) : boolean </font></td></tr>
<tr><td align="left" balign="left"> + reportException(t : Throwable) </td></tr>
<tr><td align="left" balign="left"> + addException(et : ThrowableTrace) </td></tr>
<tr><td align="left" balign="left"> + substitute(entries : Arg[]) : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> + getReturnValue(entries : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + getPersisters() : List&lt;Setter&gt; </td></tr>
<tr><td align="left" balign="left"> + addPersister(persister : Setter) </td></tr>
<tr><td align="left" balign="left"> + info() : String </td></tr>
<tr><td align="left" balign="left"> + isRevaluable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setRevaluable(isRevaluable : boolean) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getAllExertions() : List&lt;Exertion&gt; </td></tr>
<tr><td align="left" balign="left"> + getDeployments() : List&lt;Deployment&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllNetSignatures() : List&lt;NetSignature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllNetTaskSignatures() : List&lt;NetSignature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllExceptions() : List&lt;ThrowableTrace&gt; </td></tr>
<tr><td align="left" balign="left"> + getExceptions(exs : List&lt;ThrowableTrace&gt;) : List&lt;ThrowableTrace&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllTaskSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllDeployments() : List&lt;Deployment&gt; </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getExertions(exs : List&lt;Exertion&gt;) : List&lt;Exertion&gt; </font></td></tr>
<tr><td align="left" balign="left"> + updateValue(value : Object) </td></tr>
<tr><td align="left" balign="left"> + getExertion(componentExertionName : String) : Exertion </td></tr>
<tr><td align="left" balign="left"> + state() : String </td></tr>
<tr><td align="left" balign="left"> + isSpacable() : boolean </td></tr>
<tr><td align="left" balign="left"> + correctProcessSignature() : Signature </td></tr>
<tr><td align="left" balign="left"> + reset(state : int) </td></tr>
<tr><td align="left" balign="left"> + getMonitorSession() : MonitoringSession </td></tr>
<tr><td align="left" balign="left"> + setMonitorSession(monitorSession : MonitoringSession) </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + asis() : Object </td></tr>
<tr><td align="left" balign="left"> + asis(path : String) : Object </td></tr>
<tr><td align="left" balign="left"> + putValue(path : String, value : Object) : Object </td></tr>
<tr><td align="left" balign="left"> + getExceptions() : List&lt;ThrowableTrace&gt; </td></tr>
<tr><td align="left" balign="left"> + getSetters() : List&lt;Setter&gt; </td></tr>
<tr><td align="left" balign="left"> + setSetters(setters : List&lt;Setter&gt;) </td></tr>
<tr><td align="left" balign="left"> + isConditional() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCompound() : boolean </td></tr>
<tr><td align="left" balign="left"> + isJob() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTask() : boolean </td></tr>
<tr><td align="left" balign="left"> + isBlock() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCmd() : boolean </td></tr>
<tr><td align="left" balign="left"> + isProvisionable() : boolean </td></tr>
<tr><td align="left" balign="left"> + setProvisionable(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + describe() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./ServiceExertion.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Exec
	c188684 [label=<<table title="sorcer.service.Exec" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Exec.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Exec </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + FAILED : int </td></tr>
<tr><td align="left" balign="left"> + INITIAL : int </td></tr>
<tr><td align="left" balign="left"> + INSPACE : int </td></tr>
<tr><td align="left" balign="left"> + RUNNING : int </td></tr>
<tr><td align="left" balign="left"> + DONE : int </td></tr>
<tr><td align="left" balign="left"> + STOPPED : int </td></tr>
<tr><td align="left" balign="left"> + SUSPENDED : int </td></tr>
<tr><td align="left" balign="left"> + RESUMED : int </td></tr>
<tr><td align="left" balign="left"> + NEXT_STEP : int </td></tr>
<tr><td align="left" balign="left"> + INSPACE_FOR_SLA : int </td></tr>
<tr><td align="left" balign="left"> + RETURNED : int </td></tr>
<tr><td align="left" balign="left"> + UPDATED : int </td></tr>
<tr><td align="left" balign="left"> + ASYNC : int </td></tr>
<tr><td align="left" balign="left"> + NULL : int </td></tr>
<tr><td align="left" balign="left"> + ASIS : int </td></tr>
<tr><td align="left" balign="left"> + ERROR : int </td></tr>
<tr><td align="left" balign="left"> + POISONED : int </td></tr>
<tr><td align="left" balign="left"> + INVALID_CMD : int </td></tr>
<tr><td align="left" balign="left"> + TRANSACTION_ERROR : int </td></tr>
<tr><td align="left" balign="left"> + LOCK_ERROR : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		</table>>, URL="./Exec.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.dispatch.ExertDispatcher
	c188844 [label=<<table title="sorcer.core.dispatch.ExertDispatcher" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../core/dispatch/ExertDispatcher.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ExertDispatcher </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> # xrt : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> # masterXrt : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> # inputXrts : List&lt;Exertion&gt; </td></tr>
<tr><td align="left" balign="left"> # state : int </td></tr>
<tr><td align="left" balign="left"> # isMonitored : boolean </td></tr>
<tr><td align="left" balign="left"> # sharedContexts : Set&lt;Context&lt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> # isSpawned : boolean </td></tr>
<tr><td align="left" balign="left"> # runningExertionIDs : Vector&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> # subject : Subject </td></tr>
<tr><td align="left" balign="left"> # provider : Provider </td></tr>
<tr><td align="left" balign="left"> # catalog : Cataloger </td></tr>
<tr><td align="left" balign="left"> # dispatchers : Hashtable&lt;Uuid, ExertDispatcher&gt; </td></tr>
<tr><td align="left" balign="left"> # disatchGroup : ThreadGroup </td></tr>
<tr><td align="left" balign="left"> # dThread : ExertDispatcher.DispatchThread </td></tr>
<tr><td align="left" balign="left"> # providerProvisionManager : ProviderProvisionManager </td></tr>
<tr><td align="left" balign="left"> # provisionManager : ProvisionManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ExertDispatcher() </td></tr>
<tr><td align="left" balign="left"> + ExertDispatcher(exertion : Exertion, sharedContexts : Set&lt;Context&lt;&gt;&gt;, isSpawned : boolean, provider : Provider, provisionManager : ProvisionManager, providerProvisionManager : ProviderProvisionManager) </td></tr>
<tr><td align="left" balign="left"> + getDispatchers() : Hashtable&lt;Uuid, ExertDispatcher&gt; </td></tr>
<tr><td align="left" balign="left"> + setDispatchers(dispatchers : Hashtable&lt;Uuid, ExertDispatcher&gt;) </td></tr>
<tr><td align="left" balign="left"> + getProvider() : Provider </td></tr>
<tr><td align="left" balign="left"> + setProvider(provider : Provider) </td></tr>
<tr><td align="left" balign="left"> # initialize() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + dispatchExertions() </font></td></tr>
<tr><td align="left" balign="left"> # checkAndDispatchExertions() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + collectResults() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # preExecExertion(ex : Exertion) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # postExecExertion(input : Exertion, result : Exertion) </font></td></tr>
<tr><td align="left" balign="left"> + getExertion() : Exertion </td></tr>
<tr><td align="left" balign="left"> + getDispatcher(jobID : String) : ExertDispatcher </td></tr>
<tr><td align="left" balign="left"> + getState() : int </td></tr>
<tr><td align="left" balign="left"> + setState(state : int) </td></tr>
<tr><td align="left" balign="left"> + createExertionID(ex : ServiceExertion) : String </td></tr>
<tr><td align="left" balign="left"> # collectSharedContexts(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> # collectOutputs(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> # updateInputs(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> # updateInputs(toContext : ServiceContext&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> # getSharedContext(path : String, id : String) : ServiceContext&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + sendMail(message : String, to : String) </td></tr>
<tr><td align="left" balign="left"> + sendMailWithSubject(message : String, subject : String, to : String) </td></tr>
<tr><td align="left" balign="left"> + notifyExertionExecution(inex : Exertion, outex : Exertion) </td></tr>
<tr><td align="left" balign="left"> + notifyExertionExecution(parent : Exertion, inex : Exertion, outex : Exertion) </td></tr>
<tr><td align="left" balign="left"> # getDataURL(filename : String) : String </td></tr>
<tr><td align="left" balign="left"> # getDataFilename(filename : String) : String </td></tr>
<tr><td align="left" balign="left"> + isMonitorable() : boolean </td></tr>
<tr><td align="left" balign="left"> # notifyFailure(msg : String, t : ServiceExertion, seqNum : long) </td></tr>
<tr><td align="left" balign="left"> # notifyException(msg : String, t : ServiceExertion, seqNum : long) </td></tr>
<tr><td align="left" balign="left"> # notifyInformation(msg : String, t : ServiceExertion, seqNum : long) </td></tr>
<tr><td align="left" balign="left"> # notifyWarning(msg : String, t : ServiceExertion, seqNum : long) </td></tr>
<tr><td align="left" balign="left"> + stopJob() : NetJob </td></tr>
<tr><td align="left" balign="left"> + suspendJob() : NetJob </td></tr>
<tr><td align="left" balign="left"> # isInterupted(ex : Exertion) : boolean </td></tr>
<tr><td align="left" balign="left"> + resumeJob() : NetJob </td></tr>
<tr><td align="left" balign="left"> + stepJob() : NetJob </td></tr>
<tr><td align="left" balign="left"> # getCatalog() : Cataloger </td></tr>
<tr><td align="left" balign="left"> + getProviderProvisionManager() : ProviderProvisionManager </td></tr>
<tr><td align="left" balign="left"> + getProvisionManager() : ProvisionManager </td></tr>
<tr><td align="left" balign="left"> + sendCheckPointEmail(task : ServiceExertion, job : NetJob) </td></tr>
<tr><td align="left" balign="left"> # reconcileInputExertions(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> # prepareJob() </td></tr>
		</table></td></tr>
		</table>>, URL="../core/dispatch/ExertDispatcher.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.core.monitor.MonitorEvent implements sorcer.service.Exec
	c188684:p -> c188606:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.ServiceExertion implements sorcer.service.Exec
	c188684:p -> c188653:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.core.dispatch.ExertDispatcher implements sorcer.service.Exec
	c188684:p -> c188844:p [dir=back,arrowtail=empty,style=dashed];
}

