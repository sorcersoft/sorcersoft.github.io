#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.provider.ServiceProvider
	c238377 [label=<<table title="sorcer.core.provider.ServiceProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../core/provider/ServiceProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ServiceProvider </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> + COMPONENT : String </td></tr>
<tr><td align="left" balign="left"> # delegate : ProviderDelegate </td></tr>
<tr><td align="left" balign="left"> # threadManager : TaskManager </td></tr>
<tr><td align="left" balign="left"> # attributes : Set&lt;Entry&gt; </td></tr>
<tr><td align="left" balign="left"> + theContextMap : HashMap&lt;String, Context&lt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + DB_HOME : String </td></tr>
<tr><td align="left" balign="left"> + THREAD_MANAGEMNT : String </td></tr>
<tr><td align="left" balign="left"> + MAX_THREADS : String </td></tr>
<tr><td align="left" balign="left"> + MANAGER_TIMEOUT : String </td></tr>
<tr><td align="left" balign="left"> + LOAD_FACTOR : String </td></tr>
<tr><td align="left" balign="left"> + WAIT_INCREMENT : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ServiceProvider() </td></tr>
<tr><td align="left" balign="left"> + ServiceProvider(args : String[], lifeCycle : LifeCycle) </td></tr>
<tr><td align="left" balign="left"> + ServiceProvider(providerPropertiesFile : String) </td></tr>
<tr><td align="left" balign="left"> + getGrants(cl : Class&lt;?&gt;, principals : Principal[]) : Permission[] </td></tr>
<tr><td align="left" balign="left"> + grant(cl : Class&lt;?&gt;, principals : Principal[], permissions : Permission[]) </td></tr>
<tr><td align="left" balign="left"> + grantSupported() : boolean </td></tr>
<tr><td align="left" balign="left"> + getProxyVerifier() : TrustVerifier </td></tr>
<tr><td align="left" balign="left"> + getConstraints() : MethodConstraints </td></tr>
<tr><td align="left" balign="left"> + setConstraints(constraints : MethodConstraints) : RemoteMethodControl </td></tr>
<tr><td align="left" balign="left"> + getAdmin() : Object </td></tr>
<tr><td align="left" balign="left"> + setAdmin(proxy : Object) </td></tr>
<tr><td align="left" balign="left"> + getLookupAttributes() : Entry[] </td></tr>
<tr><td align="left" balign="left"> + addLookupAttributes(attrSets : Entry[]) </td></tr>
<tr><td align="left" balign="left"> + modifyLookupAttributes(attrSetTemplates : Entry[], attrSets : Entry[]) </td></tr>
<tr><td align="left" balign="left"> + getLookupGroups() : String[] </td></tr>
<tr><td align="left" balign="left"> + addLookupGroups(groups : String[]) </td></tr>
<tr><td align="left" balign="left"> + removeLookupGroups(groups : String[]) </td></tr>
<tr><td align="left" balign="left"> + setLookupGroups(groups : String[]) </td></tr>
<tr><td align="left" balign="left"> + getLookupLocators() : LookupLocator[] </td></tr>
<tr><td align="left" balign="left"> + addLookupLocators(locators : LookupLocator[]) </td></tr>
<tr><td align="left" balign="left"> + removeLookupLocators(locators : LookupLocator[]) </td></tr>
<tr><td align="left" balign="left"> + setLookupLocators(locators : LookupLocator[]) </td></tr>
<tr><td align="left" balign="left"> + unregister(impl : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getServiceProxy() : Object </td></tr>
<tr><td align="left" balign="left"> + getProxy() : Object </td></tr>
<tr><td align="left" balign="left"> + getInner() : Remote </td></tr>
<tr><td align="left" balign="left"> + setInner(innerProxy : Object) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + init(configOptions : String[], lifeCycle : LifeCycle) </td></tr>
<tr><td align="left" balign="left"> + getMainUIDescriptor() : UIDescriptor </td></tr>
<tr><td align="left" balign="left"> + getServiceUIEntries() : UIDescriptor[] </td></tr>
<tr><td align="left" balign="left"> + getServiceComponents() : Map&lt;?, ?&gt; </td></tr>
<tr><td align="left" balign="left"> + setServiceComponents(serviceComponents : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + isSpaceSecurityEnabled() : boolean </td></tr>
<tr><td align="left" balign="left"> + isMonitorable() : boolean </td></tr>
<tr><td align="left" balign="left"> + getContext(context : Context&lt;?&gt;) : Context&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getContextLogger() : Logger </td></tr>
<tr><td align="left" balign="left"> + getProviderLogger() : Logger </td></tr>
<tr><td align="left" balign="left"> + getRemoteLogger() : Logger </td></tr>
<tr><td align="left" balign="left"> + isReady(exertion : Exertion) : boolean </td></tr>
<tr><td align="left" balign="left"> + getContextScript() : String </td></tr>
<tr><td align="left" balign="left"> + getContext() : Context&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getMethodContextScript(interfaceName : String, methodName : String) : String </td></tr>
<tr><td align="left" balign="left"> + currentContextList(interfaceName : String) : String[] </td></tr>
<tr><td align="left" balign="left"> + deleteContext(interfaceName : String, methodName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMethodContext(interfaceName : String, methodName : String) : Context&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + saveMethodContext(interfaceName : String, methodName : String, theContext : Context&lt;&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAccessorGroups() : String[] </td></tr>
<tr><td align="left" balign="left"> + setAccessorGroups(accessorGroups : String[]) </td></tr>
<tr><td align="left" balign="left"> + mutualExclusion() : boolean </td></tr>
<tr><td align="left" balign="left"> # doTimeKeeping(callTimeSec : double) </td></tr>
<tr><td align="left" balign="left"> # doThreadMonitor(serviceIdString : String) : String </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + init(propFile : String) </td></tr>
<tr><td align="left" balign="left"> + init(delegate : ProviderDelegate) </td></tr>
<tr><td align="left" balign="left"> + getProviderID() : ServiceID </td></tr>
<tr><td align="left" balign="left"> + serviceIDNotify(sid : ServiceID) </td></tr>
<tr><td align="left" balign="left"> + getDelegate() : ProviderDelegate </td></tr>
<tr><td align="left" balign="left"> + getLeastSignificantBits() : long </td></tr>
<tr><td align="left" balign="left"> + getMostSignificantBits() : long </td></tr>
<tr><td align="left" balign="left"> + isValidTask(task : Exertion) : boolean </td></tr>
<tr><td align="left" balign="left"> + getInfo() : String </td></tr>
<tr><td align="left" balign="left"> + isValidMethod(name : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + invokeMethod(method : String, context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + invokeMethod(methodName : String, ex : Exertion) : Exertion </td></tr>
<tr><td align="left" balign="left"> + doExertion(exertion : Exertion, txn : Transaction) : Exertion </td></tr>
<tr><td align="left" balign="left"> + service(exertion : Exertion) : Exertion </td></tr>
<tr><td align="left" balign="left"> + service(exertion : Exertion, txn : Transaction) : Exertion </td></tr>
<tr><td align="left" balign="left"> + dropTask(task : ServiceExertion) : ServiceExertion </td></tr>
<tr><td align="left" balign="left"> + dropJob(job : Job) : Job </td></tr>
<tr><td align="left" balign="left"> + addAttribute(attributes : Entry) </td></tr>
<tr><td align="left" balign="left"> + getAttributes() : Entry[] </td></tr>
<tr><td align="left" balign="left"> + getProperties() : List&lt;Object&gt; </td></tr>
<tr><td align="left" balign="left"> + getProviderProperties() : Properties </td></tr>
<tr><td align="left" balign="left"> + getProviderConfiguration() : Configuration </td></tr>
<tr><td align="left" balign="left"> + getDescription() : String </td></tr>
<tr><td align="left" balign="left"> + getGroups() : String[] </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getProviderName() : String </td></tr>
<tr><td align="left" balign="left"> + restore() </td></tr>
<tr><td align="left" balign="left"> + fireEvent() </td></tr>
<tr><td align="left" balign="left"> + loadConfiguration(filename : String) </td></tr>
<tr><td align="left" balign="left"> + hangup() </td></tr>
<tr><td align="left" balign="left"> + getScratchDir() : File </td></tr>
<tr><td align="left" balign="left"> + getScratchDir(scratchDirNamePrefix : String) : File </td></tr>
<tr><td align="left" balign="left"> + getScratchDir(context : Context&lt;&gt;, scratchDirNamePrefix : String) : File </td></tr>
<tr><td align="left" balign="left"> + getScratchDir(context : Context&lt;&gt;) : File </td></tr>
<tr><td align="left" balign="left"> + getScratchURL(scratchFile : File) : URL </td></tr>
<tr><td align="left" balign="left"> + getProperty(key : String) : String </td></tr>
<tr><td align="left" balign="left"> + getProperty(key : String, defaultValue : String) : String </td></tr>
<tr><td align="left" balign="left"> + notifyInformation(task : Exertion, message : String) </td></tr>
<tr><td align="left" balign="left"> + notifyException(task : Exertion, message : String, e : Exception) </td></tr>
<tr><td align="left" balign="left"> + notifyExceptionWithStackTrace(task : Exertion, e : Exception) </td></tr>
<tr><td align="left" balign="left"> + notifyException(task : Exertion, e : Exception) </td></tr>
<tr><td align="left" balign="left"> + notifyWarning(task : Exertion, message : String) </td></tr>
<tr><td align="left" balign="left"> + notifyFailure(task : Exertion, e : Exception) </td></tr>
<tr><td align="left" balign="left"> + notifyFailure(task : Exertion, message : String) </td></tr>
<tr><td align="left" balign="left"> + stop(ref : UEID, subject : Subject) </td></tr>
<tr><td align="left" balign="left"> + suspend(ref : UEID, subject : Subject) </td></tr>
<tr><td align="left" balign="left"> + resume(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> + step(ex : Exertion) </td></tr>
<tr><td align="left" balign="left"> + changed(context : Context&lt;?&gt;, aspect : Object) </td></tr>
<tr><td align="left" balign="left"> + destroy() </td></tr>
<tr><td align="left" balign="left"> + isBusy() : boolean </td></tr>
<tr><td align="left" balign="left"> + destroyNode() </td></tr>
<tr><td align="left" balign="left"> + getReferentUuid() : Uuid </td></tr>
<tr><td align="left" balign="left"> + updatePolicy(policy : Policy) </td></tr>
<tr><td align="left" balign="left"> + loadContextDatabase() : boolean </td></tr>
<tr><td align="left" balign="left"> # setupThreadManager() </td></tr>
<tr><td align="left" balign="left"> + getJavaSystemProperties() : Properties </td></tr>
<tr><td align="left" balign="left"> + initSpaceSupport() </td></tr>
<tr><td align="left" balign="left"> + isContextValid(dataContext : Context&lt;?&gt;, forSignature : Signature) : boolean </td></tr>
<tr><td align="left" balign="left"> + getLogger() : Logger </td></tr>
<tr><td align="left" balign="left"> + doMonitoredTask(task : Exertion, txn : Transaction) : Exertion </td></tr>
		</table></td></tr>
		</table>>, URL="../core/provider/ServiceProvider.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.context.model.Variability<T>
	c238425 [label=<<table title="sorcer.core.context.model.Variability" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../core/context/model/Variability.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Variability&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getType() : Variability.Type </td></tr>
<tr><td align="left" balign="left"> + getDescription() : ApplicationDescription </td></tr>
<tr><td align="left" balign="left"> + setValue(varValue : Object) </td></tr>
<tr><td align="left" balign="left"> + getValueType() : Class&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + getArgs() : ArgSet </td></tr>
<tr><td align="left" balign="left"> + addArgs(set : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + getVariability(name : String) : Variability&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + getArg(varName : String) : T </td></tr>
<tr><td align="left" balign="left"> + isValueCurrent() : boolean </td></tr>
<tr><td align="left" balign="left"> + getScope() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setScope(scope : Context&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + valueChanged(obj : Object) </td></tr>
<tr><td align="left" balign="left"> + valueChanged() </td></tr>
		</table></td></tr>
		</table>>, URL="../core/context/model/Variability.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.invoker.Invoker<T>
	c238452 [label=<<table title="sorcer.core.invoker.Invoker" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../core/invoker/Invoker.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Invoker&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # defaultName : String </td></tr>
<tr><td align="left" balign="left"> # count : int </td></tr>
<tr><td align="left" balign="left"> # id : Uuid </td></tr>
<tr><td align="left" balign="left"> # value : T </td></tr>
<tr><td align="left" balign="left"> # valueIsValid : boolean </td></tr>
<tr><td align="left" balign="left"> # invokeContext : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> # pars : ArgSet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Invoker() </td></tr>
<tr><td align="left" balign="left"> + Invoker(name : String) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + Invoker(evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + Invoker(evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + getPars() : ArgSet </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : ArgSet) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : Arg[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + valueValid(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + valueValid() : boolean </td></tr>
<tr><td align="left" balign="left"> + valueChanged() </td></tr>
<tr><td align="left" balign="left"> + update(observable : Observable, obj : Object) </td></tr>
<tr><td align="left" balign="left"> + addPar(par : Object) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + addPars(parSet : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + addPars(parList : List&lt;Par&lt;&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + addPars(pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + addPars(args : ArgList) </td></tr>
<tr><td align="left" balign="left"> + addPars(parLists : ArgList[]) </td></tr>
<tr><td align="left" balign="left"> + invoke(context : Context&lt;&gt;, entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + invoke(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + asis() : T </td></tr>
<tr><td align="left" balign="left"> + substitute(entries : Arg[]) : Evaluation&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getScope() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setScope(scope : Object) </td></tr>
<tr><td align="left" balign="left"> + getEvaluator() : Evaluator&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setEvaluator(evaluator : Evaluator&lt;&gt;) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + clearPars() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + evaluate(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + addArgs(set : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + getArgs() : ArgSet </td></tr>
		</table></td></tr>
		</table>>, URL="../core/invoker/Invoker.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.SecureIdentifiable
	c238466 [label=<<table title="sorcer.service.SecureIdentifiable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecureIdentifiable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> SecureIdentifiable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getPrincipal() : Principal </td></tr>
		</table></td></tr>
		</table>>, URL="./SecureIdentifiable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Exertion
	c238501 [label=<<table title="sorcer.service.Exertion" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Exertion.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Exertion </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + THIN : int </td></tr>
<tr><td align="left" balign="left"> + STANDARD : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + getStatus() : int </td></tr>
<tr><td align="left" balign="left"> + getId() : Uuid </td></tr>
<tr><td align="left" balign="left"> + getDeploymentId() : String </td></tr>
<tr><td align="left" balign="left"> + addExertion(component : Exertion) : Exertion </td></tr>
<tr><td align="left" balign="left"> + getDataContext() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getContext() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getValue(path : String, args : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + getReturnValue(entries : Arg[]) : Object </td></tr>
<tr><td align="left" balign="left"> + getContext(componentExertionName : String) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getTrace() : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getControlContext() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getPar(path : String) : Arg </td></tr>
<tr><td align="left" balign="left"> + getProcessSignature() : Signature </td></tr>
<tr><td align="left" balign="left"> + getFlowType() : Strategy.Flow </td></tr>
<tr><td align="left" balign="left"> + getAccessType() : Strategy.Access </td></tr>
<tr><td align="left" balign="left"> + exert(txn : Transaction, entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + exert(entries : Arg[]) : Exertion </td></tr>
<tr><td align="left" balign="left"> + getExceptions() : List&lt;ThrowableTrace&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllSignatures() : List&lt;Signature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllNetSignatures() : List&lt;NetSignature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllNetTaskSignatures() : List&lt;NetSignature&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllExceptions() : List&lt;ThrowableTrace&gt; </td></tr>
<tr><td align="left" balign="left"> + getExertion(name : String) : Exertion </td></tr>
<tr><td align="left" balign="left"> + getExertions() : List&lt;Exertion&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllExertions() : List&lt;Exertion&gt; </td></tr>
<tr><td align="left" balign="left"> + isMonitorable() : boolean </td></tr>
<tr><td align="left" balign="left"> + isProvisionable() : boolean </td></tr>
<tr><td align="left" balign="left"> + isWaitable() : boolean </td></tr>
<tr><td align="left" balign="left"> + isJob() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTask() : boolean </td></tr>
<tr><td align="left" balign="left"> + isBlock() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCmd() : boolean </td></tr>
<tr><td align="left" balign="left"> + isNet() : boolean </td></tr>
<tr><td align="left" balign="left"> + setProvisionable(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + substitute(entries : Arg[]) : Exertion </td></tr>
<tr><td align="left" balign="left"> + isTree() : boolean </td></tr>
<tr><td align="left" balign="left"> + isConditional() : boolean </td></tr>
<tr><td align="left" balign="left"> + isCompound() : boolean </td></tr>
<tr><td align="left" balign="left"> + getIndex() : int </td></tr>
<tr><td align="left" balign="left"> + setIndex(i : int) </td></tr>
<tr><td align="left" balign="left"> + getMonitorSession() : MonitoringSession </td></tr>
		</table></td></tr>
		</table>>, URL="./Exertion.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Identity
	c238502 [label=<<table title="sorcer.service.Identity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Identity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Identity </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # id : Uuid </td></tr>
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # characteristicValue : Object </td></tr>
<tr><td align="left" balign="left"> # hasCharacteristicValue : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Identity() </td></tr>
<tr><td align="left" balign="left"> + getId() : Uuid </td></tr>
<tr><td align="left" balign="left"> + setId(uuid : Uuid) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + getCharacteristicValue() : Object </td></tr>
<tr><td align="left" balign="left"> + setCharacteristicValue(characteristicValue : Object) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Identity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Identifiable
	c238513 [label=<<table title="sorcer.service.Identifiable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Identifiable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Identifiable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Identifiable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Mappable<T>
	c238520 [label=<<table title="sorcer.service.Mappable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Mappable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Mappable&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getValue(path : String, args : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + asis(path : String) : T </td></tr>
<tr><td align="left" balign="left"> + putValue(path : String, value : Object) : T </td></tr>
		</table></td></tr>
		</table>>, URL="./Mappable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.co.tuple.Tuple2<T1, T2>
	c238560 [label=<<table title="sorcer.co.tuple.Tuple2" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../co/tuple/Tuple2.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Tuple2&lt;T1, T2&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + _1 : T1 </td></tr>
<tr><td align="left" balign="left"> + _2 : T2 </td></tr>
<tr><td align="left" balign="left"> + isPersistant : boolean </td></tr>
<tr><td align="left" balign="left"> + datastoreURL : URL </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Tuple2() </td></tr>
<tr><td align="left" balign="left"> + Tuple2(x1 : T1, x2 : T2) </td></tr>
<tr><td align="left" balign="left"> + key() : T1 </td></tr>
<tr><td align="left" balign="left"> + path() : String </td></tr>
<tr><td align="left" balign="left"> + value() : T2 </td></tr>
<tr><td align="left" balign="left"> + strategy() : Strategy </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(object : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
		</table></td></tr>
		</table>>, URL="../co/tuple/Tuple2.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.util.bdb.objects.MarshalledData
	c238615 [label=<<table title="sorcer.util.bdb.objects.MarshalledData" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../util/bdb/objects/MarshalledData.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MarshalledData </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MarshalledData(object : Object) </td></tr>
<tr><td align="left" balign="left"> + getMarshalledObject() : MarshalledInstance </td></tr>
<tr><td align="left" balign="left"> + getPrincipal() : Principal </td></tr>
<tr><td align="left" balign="left"> + setPrincipal(principal : Principal) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + get() : Object </td></tr>
<tr><td align="left" balign="left"> + getMarshalledSessions(sessions : ArrayList&lt;MonitorSession&gt;) : ArrayList&lt;MarshalledData&gt; </td></tr>
<tr><td align="left" balign="left"> + getDateCreated() : Date </td></tr>
<tr><td align="left" balign="left"> + setDateCreated(dateCreated : Date) </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
		</table></td></tr>
		</table>>, URL="../util/bdb/objects/MarshalledData.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.core.provider.ServiceProvider implements sorcer.service.Identifiable
	c238513:p -> c238377:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.core.context.model.Variability<T> implements sorcer.service.Identifiable
	c238513:p -> c238425:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.core.invoker.Invoker<T> implements sorcer.service.Identifiable
	c238513:p -> c238452:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.SecureIdentifiable implements sorcer.service.Identifiable
	c238513:p -> c238466:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.Exertion implements sorcer.service.Mappable<T>
	c238520:p -> c238501:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.Exertion implements sorcer.service.Identifiable
	c238513:p -> c238501:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.Identity implements sorcer.service.Identifiable
	c238513:p -> c238502:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.service.Mappable<T> implements sorcer.service.Identifiable
	c238513:p -> c238520:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.co.tuple.Tuple2<T1, T2> implements sorcer.service.Identifiable
	c238513:p -> c238560:p [dir=back,arrowtail=empty,style=dashed];
	//sorcer.util.bdb.objects.MarshalledData implements sorcer.service.Identifiable
	c238513:p -> c238615:p [dir=back,arrowtail=empty,style=dashed];
}

