#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.provider.logger.RemoteLoggerManager
	c68379 [label=<<table title="sorcer.core.provider.logger.RemoteLoggerManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RemoteLoggerManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RemoteLoggerManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RemoteLoggerManager() </td></tr>
<tr><td align="left" balign="left"> + init(provider : Provider) </td></tr>
<tr><td align="left" balign="left"> + getLogNames() : String[] </td></tr>
<tr><td align="left" balign="left"> + publish(loggingEvents : List&lt;LoggingEventVO&gt;) </td></tr>
<tr><td align="left" balign="left"> # publish(loggingEvent : ILoggingEvent) </td></tr>
<tr><td align="left" balign="left"> + getLog(fileName : String) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getLoggers() : List&lt;LoggingConfig&gt; </td></tr>
<tr><td align="left" balign="left"> + deleteLog(loggerName : String) </td></tr>
<tr><td align="left" balign="left"> + registerLogListener(listener : RemoteEventListener, handback : MarshalledObject&lt;&gt;, duration : long, filterMap : List&lt;Map&lt;String, String&gt;&gt;) : EventRegistration </td></tr>
<tr><td align="left" balign="left"> + unregisterLogListener(evReg : EventRegistration) </td></tr>
		</table></td></tr>
		</table>>, URL="./RemoteLoggerManager.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.LoggingConfig
	c68380 [label=<<table title="sorcer.core.provider.logger.LoggingConfig" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LoggingConfig.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LoggingConfig </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LoggingConfig(logger : String, lev : Level) </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getLogger() : String </td></tr>
<tr><td align="left" balign="left"> + getLevel() : Level </td></tr>
<tr><td align="left" balign="left"> + setLevel(lev : Level) </td></tr>
		</table></td></tr>
		</table>>, URL="./LoggingConfig.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.LoggerRemoteEvent
	c68381 [label=<<table title="sorcer.core.provider.logger.LoggerRemoteEvent" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LoggerRemoteEvent.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LoggerRemoteEvent </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LoggerRemoteEvent(source : Object) </td></tr>
<tr><td align="left" balign="left"> + LoggerRemoteEvent(source : Object, loggingEvent : ILoggingEvent) </td></tr>
<tr><td align="left" balign="left"> + getLoggingEvent() : ILoggingEvent </td></tr>
		</table></td></tr>
		</table>>, URL="./LoggerRemoteEvent.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.LoggerRemoteEventClient
	c68382 [label=<<table title="sorcer.core.provider.logger.LoggerRemoteEventClient" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LoggerRemoteEventClient.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LoggerRemoteEventClient </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LoggerRemoteEventClient() </td></tr>
<tr><td align="left" balign="left"> + register(filterMapList : List&lt;Map&lt;String, String&gt;&gt;, remoteEventListener : RemoteEventListener) </td></tr>
<tr><td align="left" balign="left"> + register(loggers : List&lt;RemoteLogger&gt;, filterMapList : List&lt;Map&lt;String, String&gt;&gt;, remoteEventListener : RemoteEventListener) </td></tr>
<tr><td align="left" balign="left"> + destroy() </td></tr>
		</table></td></tr>
		</table>>, URL="./LoggerRemoteEventClient.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.LoggerRemoteException
	c68383 [label=<<table title="sorcer.core.provider.logger.LoggerRemoteException" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LoggerRemoteException.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LoggerRemoteException </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LoggerRemoteException(message : String) </td></tr>
<tr><td align="left" balign="left"> + LoggerRemoteException(message : String, cause : Throwable) </td></tr>
<tr><td align="left" balign="left"> + LoggerRemoteException(cause : Throwable) </td></tr>
		</table></td></tr>
		</table>>, URL="./LoggerRemoteException.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.LogFilter
	c68384 [label=<<table title="sorcer.core.provider.logger.LogFilter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LogFilter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LogFilter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + levels : Level[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LogFilter(file : File) </td></tr>
<tr><td align="left" balign="left"> + LogFilter(input : List&lt;String&gt;) </td></tr>
<tr><td align="left" balign="left"> + textFilter(text : String, level : String) : List&lt;String&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./LogFilter.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.logger.Level
	c68385 [label=<<table title="sorcer.core.provider.logger.Level" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Level.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Level </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OFF_INT : int </td></tr>
<tr><td align="left" balign="left"> + ERROR_INT : int </td></tr>
<tr><td align="left" balign="left"> + WARN_INT : int </td></tr>
<tr><td align="left" balign="left"> + INFO_INT : int </td></tr>
<tr><td align="left" balign="left"> + DEBUG_INT : int </td></tr>
<tr><td align="left" balign="left"> + TRACE_INT : int </td></tr>
<tr><td align="left" balign="left"> + ALL_INT : int </td></tr>
<tr><td align="left" balign="left"> + OFF_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + ERROR_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + WARN_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + INFO_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + DEBUG_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + TRACE_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + ALL_INTEGER : Integer </td></tr>
<tr><td align="left" balign="left"> + OFF : Level </td></tr>
<tr><td align="left" balign="left"> + ERROR : Level </td></tr>
<tr><td align="left" balign="left"> + WARN : Level </td></tr>
<tr><td align="left" balign="left"> + INFO : Level </td></tr>
<tr><td align="left" balign="left"> + DEBUG : Level </td></tr>
<tr><td align="left" balign="left"> + TRACE : Level </td></tr>
<tr><td align="left" balign="left"> + ALL : Level </td></tr>
<tr><td align="left" balign="left"> + levelInt : int </td></tr>
<tr><td align="left" balign="left"> + levelStr : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + toInt() : int </td></tr>
<tr><td align="left" balign="left"> + toInteger() : Integer </td></tr>
<tr><td align="left" balign="left"> + isGreaterOrEqual(r : Level) : boolean </td></tr>
<tr><td align="left" balign="left"> + toLevel(sArg : String) : Level </td></tr>
<tr><td align="left" balign="left"> + valueOf(sArg : String) : Level </td></tr>
<tr><td align="left" balign="left"> + toLevel(val : int) : Level </td></tr>
<tr><td align="left" balign="left"> + toLevel(val : int, defaultLevel : Level) : Level </td></tr>
<tr><td align="left" balign="left"> + toLevel(sArg : String, defaultLevel : Level) : Level </td></tr>
		</table></td></tr>
		</table>>, URL="./Level.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

