#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.provider.dbp.DatabaseProvider
	c27178 [label=<<table title="sorcer.core.provider.dbp.DatabaseProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DatabaseProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DatabaseProvider </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DatabaseProvider() </td></tr>
<tr><td align="left" balign="left"> + init(ignored : Provider) </td></tr>
<tr><td align="left" balign="left"> + store(object : Object) : Uuid </td></tr>
<tr><td align="left" balign="left"> + update(uuid : Uuid, object : Object) : Uuid </td></tr>
<tr><td align="left" balign="left"> + update(url : URL, object : Object) : Uuid </td></tr>
<tr><td align="left" balign="left"> + getObject(uuid : Uuid) : Object </td></tr>
<tr><td align="left" balign="left"> + getContext(uuid : Uuid) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getExertion(uuid : Uuid) : Exertion </td></tr>
<tr><td align="left" balign="left"> + contextStore(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getDatabaseURL(storeType : Store, uuid : Uuid) : URL </td></tr>
<tr><td align="left" balign="left"> + getSdbUrl() : URL </td></tr>
<tr><td align="left" balign="left"> + size(storeType : Store) : int </td></tr>
<tr><td align="left" balign="left"> + deleteURL(url : URL) : Uuid </td></tr>
<tr><td align="left" balign="left"> + retrieve(url : URL) : Object </td></tr>
<tr><td align="left" balign="left"> + retrieve(uuid : Uuid, storeType : Store) : Object </td></tr>
<tr><td align="left" balign="left"> + contextRetrieve(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + contextUpdate(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + contextList(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + list(storeType : Store) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + list(url : URL) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + contextClear(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + clear(type : Store) : int </td></tr>
<tr><td align="left" balign="left"> # setupDatabase() </td></tr>
<tr><td align="left" balign="left"> + destroy() </td></tr>
<tr><td align="left" balign="left"> + contextDelete(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getStoredMap(storeType : Store) : StoredMap&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getStoredSet(storeType : Store) : StoredValueSet&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + delete(object : Object) : Uuid </td></tr>
<tr><td align="left" balign="left"> + deleteIdentifiable(object : Object) : Uuid </td></tr>
<tr><td align="left" balign="left"> + contextSize(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + contextRecords(context : Context&lt;&gt;) : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + storeObject(object : Object) : URL </td></tr>
<tr><td align="left" balign="left"> + updateObject(url : URL, object : Object) </td></tr>
<tr><td align="left" balign="left"> + deleteObject(url : URL) </td></tr>
		</table></td></tr>
		</table>>, URL="./DatabaseProvider.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.dbp.DatabaseProvider.PersistThread
	c27179 [label=<<table title="sorcer.core.provider.dbp.DatabaseProvider.PersistThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DatabaseProvider.PersistThread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PersistThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DatabaseProvider.PersistThread(object : Object) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + getUuid() : Uuid </td></tr>
		</table></td></tr>
		</table>>, URL="./DatabaseProvider.PersistThread.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.dbp.DatabaseProvider.UpdateThread
	c27180 [label=<<table title="sorcer.core.provider.dbp.DatabaseProvider.UpdateThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DatabaseProvider.UpdateThread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpdateThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DatabaseProvider.UpdateThread(uuid : Uuid, object : Object) </td></tr>
<tr><td align="left" balign="left"> + DatabaseProvider.UpdateThread(url : URL, object : Object) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + getUuid() : Uuid </td></tr>
		</table></td></tr>
		</table>>, URL="./DatabaseProvider.UpdateThread.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.dbp.DatabaseProvider.DeleteThread
	c27181 [label=<<table title="sorcer.core.provider.dbp.DatabaseProvider.DeleteThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DatabaseProvider.DeleteThread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DeleteThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DatabaseProvider.DeleteThread(uuid : Uuid, storeType : Store) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + getUuid() : Uuid </td></tr>
		</table></td></tr>
		</table>>, URL="./DatabaseProvider.DeleteThread.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.provider.dbp.IDatabaseProvider
	c27182 [label=<<table title="sorcer.core.provider.dbp.IDatabaseProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./IDatabaseProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> IDatabaseProvider </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + storeObject(object : Object) : URL </td></tr>
<tr><td align="left" balign="left"> + updateObject(url : URL, object : Object) </td></tr>
<tr><td align="left" balign="left"> + deleteObject(url : URL) </td></tr>
<tr><td align="left" balign="left"> + retrieve(url : URL) : Object </td></tr>
		</table></td></tr>
		</table>>, URL="./IDatabaseProvider.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.core.provider.dbp.DatabaseProvider implements sorcer.core.provider.dbp.IDatabaseProvider
	c27182:p -> c27178:p [dir=back,arrowtail=empty,style=dashed];
}

