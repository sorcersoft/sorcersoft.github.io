#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.invoker.Invoker<T>
	c325351 [label=<<table title="sorcer.core.invoker.Invoker" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Invoker.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Invoker&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # defaultName : String </td></tr>
<tr><td align="left" balign="left"> # count : int </td></tr>
<tr><td align="left" balign="left"> # id : Uuid </td></tr>
<tr><td align="left" balign="left"> # value : T </td></tr>
<tr><td align="left" balign="left"> # valueIsValid : boolean </td></tr>
<tr><td align="left" balign="left"> # invokeContext : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> # pars : ArgSet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Invoker() </td></tr>
<tr><td align="left" balign="left"> + Invoker(name : String) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + Invoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + Invoker(evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + Invoker(evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + getPars() : ArgSet </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : ArgSet) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : Arg[]) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + valueValid(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + valueValid() : boolean </td></tr>
<tr><td align="left" balign="left"> + valueChanged() </td></tr>
<tr><td align="left" balign="left"> + update(observable : Observable, obj : Object) </td></tr>
<tr><td align="left" balign="left"> + addPar(par : Object) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + addPars(parSet : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + addPars(parList : List&lt;Par&lt;&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + addPars(pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + addPars(args : ArgList) </td></tr>
<tr><td align="left" balign="left"> + addPars(parLists : ArgList[]) </td></tr>
<tr><td align="left" balign="left"> + invoke(context : Context&lt;&gt;, entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + invoke(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + asis() : T </td></tr>
<tr><td align="left" balign="left"> + substitute(entries : Arg[]) : Evaluation&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getScope() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setScope(scope : Object) </td></tr>
<tr><td align="left" balign="left"> + getEvaluator() : Evaluator&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setEvaluator(evaluator : Evaluator&lt;&gt;) : Invoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + clearPars() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + evaluate(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + addArgs(set : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + getArgs() : ArgSet </td></tr>
		</table></td></tr>
		</table>>, URL="./Invoker.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.invoker.MethodInvoker<T>
	c325356 [label=<<table title="sorcer.core.invoker.MethodInvoker" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./MethodInvoker.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MethodInvoker&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # logger : Logger </td></tr>
<tr><td align="left" balign="left"> # className : String </td></tr>
<tr><td align="left" balign="left"> # target : Object </td></tr>
<tr><td align="left" balign="left"> # count : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MethodInvoker() </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, methodName : String) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(target : Object, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(target : Object, methodName : String, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, target : Object, methodName : String, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, className : String, methodName : String, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, className : String, methodName : String, signature : Class&lt;?&gt;[], pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, className : String, methodName : String, paramTypes : Class&lt;?&gt;[], distributionParameter : String, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, exportUrl : URL, className : String, methodName : String) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(name : String, exportUrl : URL, className : String, methodName : String, initObject : Object) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(exportURL : URL[], className : String, methodName : String) </td></tr>
<tr><td align="left" balign="left"> + MethodInvoker(exportURL : URL[], className : String, methodName : String, initObject : Object) </td></tr>
<tr><td align="left" balign="left"> + setArgs(methodName : String, paramTypes : Class&lt;?&gt;[], parameters : Object[]) </td></tr>
<tr><td align="left" balign="left"> + setArgs(paramTypes : Class&lt;?&gt;[], parameters : Object[]) </td></tr>
<tr><td align="left" balign="left"> + setArgs(parameters : Object[]) </td></tr>
<tr><td align="left" balign="left"> + setSignatureTypes(paramTypes : Class&lt;?&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + setSelector(methodName : String) </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + getInitObject() : Object </td></tr>
<tr><td align="left" balign="left"> + setInitObject(initObject : Object) </td></tr>
<tr><td align="left" balign="left"> + setParameterTypes(types : Class&lt;?&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + setParameters(args : Object[]) </td></tr>
<tr><td align="left" balign="left"> + getParameters() : Object[] </td></tr>
<tr><td align="left" balign="left"> + getClassName() : String </td></tr>
<tr><td align="left" balign="left"> + getTarget() : Object </td></tr>
<tr><td align="left" balign="left"> + getSelector() : String </td></tr>
<tr><td align="left" balign="left"> + describe() : String </td></tr>
<tr><td align="left" balign="left"> + setContext(context : Context&lt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./MethodInvoker.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.invoker.MethodInvoking<T>
	c325363 [label=<<table title="sorcer.core.invoker.MethodInvoking" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./MethodInvoking.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> MethodInvoking&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setParameterTypes(types : Class&lt;?&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + setParameters(args : Object[]) </td></tr>
<tr><td align="left" balign="left"> + getParameters() : Object[] </td></tr>
<tr><td align="left" balign="left"> + evaluate(entries : Arg[]) : T </td></tr>
		</table></td></tr>
		</table>>, URL="./MethodInvoking.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.core.invoker.MethodInvoker<T> extends sorcer.core.invoker.Invoker<T>
	c325351:p -> c325356:p [dir=back,arrowtail=empty];
	//sorcer.core.invoker.MethodInvoker<T> implements sorcer.core.invoker.MethodInvoking<T>
	c325363:p -> c325356:p [dir=back,arrowtail=empty,style=dashed];
}

