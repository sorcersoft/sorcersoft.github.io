#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// sorcer.core.invoker.ServiceInvoker<T>
	c303894 [label=<<table title="sorcer.core.invoker.ServiceInvoker" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ServiceInvoker.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ServiceInvoker&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # name : String </td></tr>
<tr><td align="left" balign="left"> # defaultName : String </td></tr>
<tr><td align="left" balign="left"> # count : int </td></tr>
<tr><td align="left" balign="left"> # id : Uuid </td></tr>
<tr><td align="left" balign="left"> # value : T </td></tr>
<tr><td align="left" balign="left"> # valueIsValid : boolean </td></tr>
<tr><td align="left" balign="left"> # invokeContext : ParModel&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> # pars : ArgSet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ServiceInvoker() </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(name : String) </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(context : ParModel&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(context : ParModel&lt;&gt;, evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(evaluator : Evaluator&lt;&gt;, pars : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + ServiceInvoker(evaluator : Evaluator&lt;&gt;, pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + getPars() : ArgSet </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : ArgSet) : ServiceInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setPars(pars : Arg[]) : ServiceInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + valueValid(state : boolean) </td></tr>
<tr><td align="left" balign="left"> + valueValid() : boolean </td></tr>
<tr><td align="left" balign="left"> + valueChanged() </td></tr>
<tr><td align="left" balign="left"> + update(observable : Observable, obj : Object) </td></tr>
<tr><td align="left" balign="left"> + addPar(par : Object) : ServiceInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + addPars(parSet : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + addPars(parList : List&lt;Par&lt;&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + addPars(pars : Par&lt;&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + addPars(args : ArgList) </td></tr>
<tr><td align="left" balign="left"> + addPars(parLists : ArgList[]) </td></tr>
<tr><td align="left" balign="left"> + invoke(context : Context&lt;&gt;, entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + invoke(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + asis() : T </td></tr>
<tr><td align="left" balign="left"> + substitute(entries : Arg[]) : Evaluation&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getScope() : Context&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setScope(scope : Object) </td></tr>
<tr><td align="left" balign="left"> + getEvaluator() : Evaluator&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + setEvaluator(evaluator : Evaluator&lt;&gt;) : ServiceInvoker&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + clearPars() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getId() : Object </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setName(name : String) </td></tr>
<tr><td align="left" balign="left"> + evaluate(entries : Arg[]) : T </td></tr>
<tr><td align="left" balign="left"> + addArgs(set : ArgSet) </td></tr>
<tr><td align="left" balign="left"> + getArgs() : ArgSet </td></tr>
<tr><td align="left" balign="left"> + setParameterTypes(types : Class&lt;?&gt;[]) </td></tr>
<tr><td align="left" balign="left"> + setParameters(args : Object[]) </td></tr>
		</table></td></tr>
		</table>>, URL="./ServiceInvoker.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.core.invoker.InvokeDoubleIncrementor
	c303896 [label=<<table title="sorcer.core.invoker.InvokeDoubleIncrementor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./InvokeDoubleIncrementor.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> InvokeDoubleIncrementor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # increment : double </td></tr>
<tr><td align="left" balign="left"> # target : Invocation&lt;Double&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + InvokeDoubleIncrementor(name : String, invoker : Invocation&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + InvokeDoubleIncrementor(name : String, invoker : Invocation&lt;&gt;, increment : double) </td></tr>
<tr><td align="left" balign="left"> + getValue(entries : Arg[]) : Double </td></tr>
<tr><td align="left" balign="left"> + getIncrement() : double </td></tr>
<tr><td align="left" balign="left"> + getTarget() : Invocation&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + reset() : Incrementor&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + next() : Double </td></tr>
		</table></td></tr>
		</table>>, URL="./InvokeDoubleIncrementor.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// sorcer.service.Incrementor<T>
	c303957 [label=<<table title="sorcer.service.Incrementor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../service/Incrementor.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Incrementor&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + next() : T </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + reset() : Incrementor&lt;T&gt; </font></td></tr>
		</table></td></tr>
		</table>>, URL="../../service/Incrementor.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//sorcer.core.invoker.InvokeDoubleIncrementor extends sorcer.core.invoker.ServiceInvoker<java.lang.Double>
	c303894:p -> c303896:p [dir=back,arrowtail=empty];
	//sorcer.core.invoker.InvokeDoubleIncrementor implements sorcer.service.Incrementor<T>
	c303957:p -> c303896:p [dir=back,arrowtail=empty,style=dashed];
}

